@use 'sass:math';

//-------------- Functions -------------//

// Breakpoints

$breakpoints: (
    'small': 0,
    'medium': 768px,
    'large': 1280px, 
    'xlarge': 1420px,
    'xxlarge': 1920px, 
) !default;
 
// IE Media Query
@mixin ie{
    @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none){
        @content;
    }

}

// Rem calc
$global-font-size: 100% !default;

@function strip-unit($num) {
    @return math.div($num, ($num * 0 + 1));
}

@function rem-calc($values, $base: null) {
    $rem-values: ();
    $count: length($values);

    @if $base == null {
        $base: $global-font-size;
    }

    @if unit($base) == '%' {
        $base: calc(($base / 100%) * 16px);
    }

    @if unit($base) == 'rem' {
        $base: calc(strip-unit($base) * 16px);
    }

    @if $count == 1 {
        @return -zf-to-rem($values, $base);
    }

    @for $i from 1 through $count {
        $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
    }

    @return $rem-values;
}

@function -zf-bp-to-em($value) {
    @if unit($value) == 'px' or unitless($value) {
        $value: rem-calc($value, $base: 16px);
    }

    @return strip-unit($value) * 1rem;
}

@function -zf-to-rem($value, $base: null) {

    @if type-of($value) != 'number' {
        @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
        @return $value;
    }

    @if unit($value) == 'em' {
        $value: calc(strip-unit($value) * 1rem);
    }

    @if unit($value) != 'rem' {
        $value: calc(strip-unit($value) / strip-unit($base) * 1rem);
    }

    @if $value == 0rem {
        $value: 0;
    }

    @return $value;
}

@function unitless-calc($value, $base: null) {

    @if $base == null {
        $base: $global-font-size;
    }

    @if unit($base) == '%' {
        $base: calc(($base / 100%) * 16px);
    }

    @if unit($base) == 'rem' {
        $base: calc(strip-unit($base) * 16px);
    }

    @if unit($base) == 'em' {
        $base: calc(strip-unit($base) * 16px);
    }

    @if unit($value) == '%' {
        $value: calc(($value / 100%) * $base);
    }

    @if unit($value) == 'rem' {
        $value: calc(strip-unit($value) * $base);
    }

    @if unit($value) == 'em' {
        $value: calc(strip-unit($value) * $base);
    }

    @if unit($value) == 'px' {
        @return strip-unit($value) / strip-unit($base);
    }

    @if unitless($value) and ($value > 10) {
        @return calc($value / strip-unit($base));
    }

    @return $value;
}

@function map-to-list($map, $keep: 'both') {
    $keep: if(index('keys' 'values', $keep), $keep, 'both');

    @if type-of($map) == 'map' {
        $keys: ();
        $values: ();

        @each $key, $val in $map {
            $keys: append($keys, $key);
            $values: append($values, $val);
        }

        @if $keep == 'keys' {
            @return $keys;
        }
        @else if $keep == 'values' {
            @return $values;
        }
        @else {
            @return zip($keys, $values);
        }
    }

    @return if(type-of($map) != 'list', ($value,), $map);

}

// Breakpoints

$print-breakpoint: large !default;

$-zf-zero-breakpoint: small !default;

$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');

$-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);
$breakpoint-classes: (small medium large) !default;
@function breakpoint($val: $-zf-zero-breakpoint) {
    $bp: nth($val, 1);
    $bp-max: 0;
    $dir: if(length($val) > 1, nth($val, 2), up);
    $str: '';
    $named: false;

    @if $bp == 'landscape' or $bp == 'portrait' {
        @return '(orientation: #{$bp})';
    }
    @else if $bp == 'retina' {
        @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';
    }

    @if type-of($bp) == 'string' {
        @if map-has-key($breakpoints, $bp) {
            @if $dir == 'only' or $dir == 'down' {
                $bp-max: -zf-map-next($breakpoints, $bp);
            }

            $bp: map-get($breakpoints, $bp);
            $named: true;
        }
        @else {
            $bp: 0;
            @warn 'breakpoint(): "#{$val}" is not defined in your $breakpoints setting.';
        }
    }

    $bp: -zf-bp-to-em($bp);
    @if $bp-max {
        $bp-max: -zf-bp-to-em($bp-max) - calc(1/16);
    }

    @if $bp > 0rem or $dir == 'only' or $dir == 'down' {
        @if $dir == 'only' {
            @if $named == true {
                @if $bp > 0rem {
                    $str: $str + '(min-width: #{$bp})';

                    @if $bp-max != null {
                        $str: $str + ' and ';
                    }
                }

                @if $bp-max != null {
                    $str: $str + '(max-width: #{$bp-max})';
                }
            }
            @else {
                @warn 'breakpoint(): Only named media queries can have an `only` range.';
            }
        }

        @else if $dir == 'down' {
            $max: if($named, $bp-max, $bp);

            @if $named or $bp > 0rem {
                @if $max != null {
                    $str: $str + '(max-width: #{$max})';
                }
            }
        }

        // `up` ranges use the format `(min-width: n)`
        @else if $bp > 0rem {
            $str: $str + '(min-width: #{$bp})';
        }
    }

    @return $str;
}

@mixin breakpoint($value) {
    $str: breakpoint($value);
    $bp: index($-zf-breakpoints-keys, $value);
    $pbp: index($-zf-breakpoints-keys, $print-breakpoint);

    $old-zf-size: null;

    @if global-variable-exists(-zf-size) {
        $old-zf-size: $-zf-size;
    }
    $-zf-size: nth($value, 1) !global; 
 
    @if $str == '' {
        @content;
    }
    @else { 
        @if $bp != null and $bp <= $pbp {
            @media print, screen and #{$str} {
                @content;
            }
        }
        @else {
            @media #{$str} {
                @content;
            }
        }
    }

    @if $old-zf-size != null {
        $-zf-size: $old-zf-size !global;
    } @else {
        $-zf-size: null !global;
    }
}

@mixin container($value) {
    $str: breakpoint($value);
    $bp: index($-zf-breakpoints-keys, $value);
    $pbp: index($-zf-breakpoints-keys, $print-breakpoint);

    $old-zf-size: null;

    @if global-variable-exists(-zf-size) {
        $old-zf-size: $-zf-size;
    }
    $-zf-size: nth($value, 1) !global; 
 
    @if $str == '' {
        @content;
    }
    @else { 
        @if $bp != null and $bp <= $pbp {
            @media print, screen and #{$str} {
                @content;
            }
        }
        @else {
            @container main #{$str} {
                @content;
            }
        }
    }

    @if $old-zf-size != null {
        $-zf-size: $old-zf-size !global;
    } @else {
        $-zf-size: null !global;
    }
}

@function -zf-bp-serialize($map) {
    $str: '';
    @each $key, $value in $map {
        $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';
    }
    $str: str-slice($str, 1, -2);

    @return $str;
}

@function -zf-map-next($map, $key) {

    $values: map-keys($map);

    $i: 0;
    @if (map-has-key($map, $key)) {
        $i: index($values, $key) + 1;
    }
    @if ($i > length($map) or $i == 0) {
        @return null;
    }
    @else {
        @return map-get($map, nth($values, $i));
    }

}
@function -zf-breakpoints-less-than($key) {
    $list: ();
    $found_key: false;

    @each $name in $-zf-breakpoints-keys {
        @if ($name == $key) {
            $found_key: true;
        }
        @if not $found_key {
            $list: append($list, $name);
        }
    }
    @return $list;
}
@function -zf-closest-named-breakpoint($breakpoint) {
    $last: $-zf-zero-breakpoint;
    $found: false;

    $value: unitless-calc($breakpoint, 1px);
    @each $key, $val in $breakpoints {
        @if not $found {
            @if unitless-calc($val) > $value {
                $found: true;
            } @else {
                $last: $key;
            }
        }
    }

    @return $last;
}
@function -zf-get-bp-val($map, $value) {
    @if type-of($map) == 'number' {
        @return $map;
    }
    @if not map-has-key($breakpoints, $value) {
        @if type-of($value) == 'number' {
            $value: -zf-closest-named-breakpoint($value);
        } @else {
            @return null;
        }
    } 
    @else if map-has-key($map, $value) {
        @return map-get($map, $value);
    }
    @else {
        $anchor: null;
        $found: false;

        @each $key, $val in $breakpoints {
            @if not $found {
                @if map-has-key($map, $key) {
                    $anchor: $key;
                }
                @if $key == $value {
                    $found: true;
                }
            }
        }

        @return map-get($map, $anchor);
    }
}

@if map-has-key($breakpoints, small) {
    $small-up: screen;
    $small-only: unquote('screen and #{breakpoint(small only)}');
}

@if map-has-key($breakpoints, medium) {
    $medium-up: unquote('screen and #{breakpoint(medium)}');
    $medium-only: unquote('screen and #{breakpoint(medium only)}');
}

@if map-has-key($breakpoints, large) {
    $large-up: unquote('screen and #{breakpoint(large)}');
    $large-only: unquote('screen and #{breakpoint(large only)}');
}

@if map-has-key($breakpoints, xlarge) {
    $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');
    $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');
}

@if map-has-key($breakpoints, xxlarge) {
    $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');
}

